version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run: 
          name: Front-end build
          command: |
            cd ./frontend &&
            npm install &&
            npm run build
      - save_cache:
          paths: ./frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end build
          command: |
             cd ./backend &&
             npm install &&
             npm run build
      - save_cache:
          paths: ./backend/node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Front-end test
          command: |
            cd ./frontend &&
            npm install &&
            npm test
      - save_cache:
          paths: ./frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID}          
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end test
          command: |
            cd ./backend &&
            npm install &&
            npm test
      - save_cache:
          paths: ./backend/node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID}      

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Front-end scan
          command: |
            cd ./frontend &&
            npm install &&
            npm audit --audit-level=critical
      - save_cache:
          paths: ./frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID}         

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end scan
          command: |
            cd ./backend &&
            npm install &&
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: ./backend/node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID}   

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags Project="${BACKEND_TAG}" \
            --stack-name "Udapeople-Backend-Stack-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" &&
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
            --request PUT --data "$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters Name=tag:Project,Values=${BACKEND_TAG} \
            --output text)" https://api.memstash.io/values/udapeople-backend-url &&
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
            --request PUT --data "$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Project,Values=${BACKEND_TAG} \
            --output text)" https://api.memstash.io/values/udapeople-backend-ip
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Project="${FRONTEND_TAG}" \
            --stack-name "Udapeople-Frontend-Stack-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end url to ansible inventory
          command: |
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Project,Values=${BACKEND_TAG}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install tar and gzip to support workspaces
          command: yum install -y tar && yum install -y gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      TYPEORM_CONNECTION: ${TYPEORM_CONNECTION}
      TYPEORM_HOST: ${TYPEORM_HOST}
      TYPEORM_USERNAME: ${TYPEORM_USERNAME}
      TYPEORM_PASSWORD: ${TYPEORM_PASSWORD}
      TYPEORM_DATABASE: ${TYPEORM_DATABASE}
      TYPEORM_MIGRATIONS: ${TYPEORM_MIGRATIONS}
      TYPEORM_ENTITIES: ${TYPEORM_ENTITIES}   
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6c:32:1d:8e:a6:44:6b:bf:b6:25:8b:e8:74:61:19:29"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ./circleci/ansible
            ansible-playbook -i inventory.txt ./ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ./backend &&
            npm install &&
            npm run migrations > ~/migration_results.txt
      - run:
          name: Send migration results to memstash
          command: |
            if ! [ -z "$(grep -e "has been executed successfully" ~/migration_results.txt)" ]; 
            then curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
            --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7} ;
            else curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
            --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7} ;
            fi
     # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo yum update
            curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
            sudo yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP = curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/udapeople-backend-url
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation describe-stacks \
            --stack-name "Udapeople-Frontend-Stack-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Stacks[*].Outputs[*].OutputValue' --output text
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6c:32:1d:8e:a6:44:6b:bf:b6:25:8b:e8:74:61:19:29"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i inventory.txt ./ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
            - test-backend
      - scan-frontend:
          requires:
            - build-frontend
            - test-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
