version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run: 
          name: Front-end build
          command: |
            cd ./frontend &&
            npm install &&
            npm run build
      - save_cache:
          paths: ./frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end build
          command: |
             cd ./backend &&
             npm install &&
             npm run build
      - save_cache:
          paths: ./backend/node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Front-end test
          command: |
            cd ./frontend &&
            npm install &&
            npm test
      - save_cache:
          paths: ./frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID}          
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end test
          command: |
            cd ./backend &&
            npm install &&
            npm test
      - save_cache:
          paths: ./backend/node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID}      

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Front-end scan
          command: |
            cd ./frontend &&
            npm install &&
            npm audit --audit-level=critical
      - save_cache:
          paths: ./frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID}         

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end scan
          command: |
            cd ./backend &&
            npm install &&
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: ./backend/node_modules
          key: backend-build-${CIRCLE_WORKFLOW_ID}   

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags Project="${BACKEND_TAG}" \
            --stack-name "Udapeople-Backend-Stack-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" && \
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
            --request PUT --data "$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Project,Values=${BACKEND_TAG}
            --output text)" https://api.memstash.io/values/udapeople-backend
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags Project="${FRONTEND_TAG}" \
            --stack-name "Udapeople-Frontend-Stack-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end url to ansible inventory
          command: |
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Project,Values=${BACKEND_TAG}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
            - test-backend
      - scan-frontend:
          requires:
            - build-frontend
            - test-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: master
